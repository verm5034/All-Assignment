{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources":
  {
    "classVpc":
    {
      "Type": "AWS::EC2::VPC",
      "Properties": 
      {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": "10.0.0.0/18",
        "Tags": [ { "Key": "Name", "Value": "engineeringVpc" }]
      }
    },
    "publicSubnet1": 
     {
        "Type": "AWS::EC2::Subnet",
        "Properties":
        {
          "VpcId": 
          {
            "Ref": "classVpc"
          },
          "CidrBlock": "10.0.0.0/24",
          "AvailabilityZone" : "us-east-1a",
          "Tags" : [ { "Key" : "Name", "Value" : "publicSubnet1" } ]
        }
     },
  
    "publicSubnet2":
     {
        "Type": "AWS::EC2::Subnet",
        "Properties": 
        {
          "VpcId":
          {
            "Ref": "classVpc"
          },
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone" : "us-east-1b",
          "Tags" : [ { "Key" : "Name", "Value" : "publicSubnet2" } ]
        }
     },
  
    "webserversSG":
     {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties":
        {
          "Tags" :  [ { "Key" : "Name", "Value" : "webserversSG"} ],
          "VpcId": { "Ref": "classVpc" },
          "GroupDescription": "Allow access from HTTP and SSH traffic",
          "SecurityGroupIngress": 
          [
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": {"Ref": "YourIp"}
            }
          ]
         }
     },

    "ALBListener" : 
     {
        "Type" : "AWS::ElasticLoadBalancingV2::Listener",
        "Properties" : 
        {
          "DefaultActions" :
          [{
            "Type" : "forward",
            "TargetGroupArn" : { "Ref" : "TargetGroup" }
          }],
          "LoadBalancerArn" : { "Ref" : "loadBalancer" },
          "Port" : "80",
          "Protocol" : "HTTP"
        }
     },
    "loadBalancer" : 
     {
        "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties" : 
        {    
          "Name" : "engineeringLB",
          "Scheme" : "internet-facing",
          "SecurityGroups" : [{ "Ref": "webserversSG" }],
          "Subnets" :
          [ 
            { "Ref": "publicSubnet1" },
            { "Ref" : "publicSubnet2" }
          ],
          "Tags" : [ { "Key" : "websiteLB" } ]            
        }   
     },
    "TargetGroup" : 
      {
       "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
       "Properties" : 
       {        
         "HealthCheckPath" : "/",
         "Name" : "engineeringWebservers",
         "Port" : 80,
         "Protocol" : "HTTP",
         "Tags" :  [ { "Key" : "Name" } ],
        
         "Targets" : 
          [ 
            { "Id": {"Ref" : "WebServer1"}, "Port": 80 },
            { "Id": {"Ref" : "WebServer2"}, "Port": 80 } 
          ],       
         "VpcId" : { "Ref": "classVpc" }      
        }
      },

    "internetGW": 
      {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
      },

    "vpcGwAttachment":
     {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": 
        {
          "InternetGatewayId": { "Ref": "internetGW" },
          "VpcId": { "Ref": "classVpc" }
        }
     },

    "publicRT":
      {
        "Type": "AWS::EC2::RouteTable",
        "Properties": 
        {
          "VpcId": {  "Ref": "classVpc" }
        }
      },

    "publicRoute": 
     {
        "Type": "AWS::EC2::Route",
        "Properties": 
        {
          "DestinationCidrBlock": "0.0.0.0/0",
          "RouteTableId": { "Ref": "publicRT" },  
          "GatewayId": { "Ref": "internetGW" }
        },
        "DependsOn": [  "internetGW" ]
      },

    "publicSubnet1RTassoc": 
      {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": 
        {
          "RouteTableId":
          {
            "Ref": "publicRT"
          },
          "SubnetId":
          {
            "Ref": "publicSubnet1"
          }
        }
      },

    "WebServer1": 
      {
        "Type" : "AWS::EC2::Instance",
        "Properties": 
         {
            "InstanceType": { "Ref" : "InstanceType" },
            "ImageId": "ami-3ea13f29",
            "KeyName": { "Ref" : "KeyName" },
            "NetworkInterfaces": 
            [ {
                "AssociatePublicIpAddress": "true",
                "DeviceIndex": "0",
                "GroupSet": [{ "Ref" : "webserversSG" }],
                "SubnetId": { "Ref": "publicSubnet1" }
            } ],
            "Tags": [ {  "Key": "Name", "Value": "web1" }]
         }
      },

    "WebServer2": 
     {
       "Type": "AWS::EC2::Instance",
       "Properties": 
       {
          "InstanceType": { "Ref" : "InstanceType" },
          "ImageId": "ami-3ea13f29",
          "KeyName": { "Ref" : "KeyName" },
          "NetworkInterfaces": 
            [{
               "AssociatePublicIpAddress": "true",
               "DeviceIndex": "0",
               "GroupSet": [{ "Ref" : "webserversSG" }],
               "SubnetId": {  "Ref": "publicSubnet2" }
            }],  
           "Tags": [{ "Key": "Name", "Value": "web2" } ]
       }  
     },
        
    "publicSubnet2RTassoc": 
    {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties":
      {
        "RouteTableId": {  "Ref": "publicRT" },
        "SubnetId": { "Ref": "publicSubnet2" }
      }
  }  
  },
"Parameters": 
{
    "KeyName": 
     {
        "Description": "Name of your EC2 KeyPair to enable SSH access to the instances.",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
     },
    "YourIp": 
     {
        "Description": "The current CIDR IP address of my workstation (x.x.x.x/32).",
        "Type": "String"
     },
    "InstanceType":
     {
        "Description": "Server instance type",
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": 
        [
          "t2.micro",
          "t2.small"
        ],
        "ConstraintDescription": "Must be a valid EC2 type."
     }
},
"Outputs":
{      
  "weburl" : 
  {      
    "Value": 
    {"Fn::GetAtt": ["loadBalancer", "DNSName"]},      
    "Description": "load balancer dns name"      
  }    
}
    
}